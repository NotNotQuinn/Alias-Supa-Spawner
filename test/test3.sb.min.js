/*! Created using 'Alias Supa Spawner' (https://github.com/NotNotQuinn/Alias-Supa-Spawner), Powered by UglifyJS */
/* Alias by QuinnDT, source: https://github.com/NotNotQuinn/Alias-Supa-Spawner/blob/main/test/test3.sb.js */
const ASS_Entry=function(){var success=msg=>`abb say ${msg}`;console.log('old args',args);const{expression,newArgs}=function getExpression(args){let output;const paramNames=[{name:'expression',type:'string'}].map(i=>i.name);let argsString=args.join(' ');var quotesRegex=new RegExp(`(?<name>${paramNames.join('|')}):(?<!\\\\)\u{22}(?<value>.*?)(?<!\\\\)\u{22}`,'g');const quoteMatches=[...argsString.matchAll(quotesRegex)];for(const match of quoteMatches.reverse()){argsString=argsString.slice(0,match.index)+argsString.slice(match.index+match[0].length+1);const{name:name=null,value:value=null}=match.groups;var{}=[{name:'expression',type:'string'}].find(i=>i.name===name);if(null!==name&&null!==value){var parsedValue=value.replace(/^\u{22}|\u{22}$/g,'').replace(/\\\u{22}/g,'\u{22}');if(null===parsedValue)return sb.CooldownManager.unsetPending(userData.ID),{success:!1,reply:`Cannot parse parameter \u{22}${name}\u{22}!`};output=parsedValue}}const remainingArgs=argsString.split(' '),paramRegex=new RegExp(`^(?<name>${paramNames.join('|')}):(?<value>.*)$`);for(let i=remainingArgs.length-1;0<=i;i--){if(!paramRegex.test(remainingArgs[i]))continue;const{name:name=null,value:value=null}=remainingArgs[i].match(paramRegex).groups;var{}=[{name:'expression',type:'string'}].find(i=>i.name===name);if(null!==name&&null!==value){var parsedValue=String(value);if(null===parsedValue)return sb.CooldownManager.unsetPending(userData.ID),{success:!1,reply:`Cannot parse parameter \u{22}${name}\u{22}!`};output=parsedValue,remainingArgs.splice(i,1)}}return args=remainingArgs.filter(Boolean),{expression:output,newArgs:args}}(args);if(console.log({expression:expression,newArgs:newArgs}),null==expression)return success(newArgs.join(' '));let res=((templatedArguments,inputArguments)=>{const resultArguments=[],numberRegex=/(?<order>-?\d+)(\.\.(?<range>-?\d+))?(?<rest>\+?)/;for(let i=0;i<templatedArguments.length;i++){const parsed=templatedArguments[i].replace(/#{(.+?)}/g,(total,match)=>{var temp,useRest=match.match(numberRegex);if(useRest){let order=Number(useRest.groups.order);order<0&&(order=inputArguments.length+order);let range=useRest.groups.range?Number(useRest.groups.range):null;'number'==typeof range&&(range<0&&(range=inputArguments.length+range+1),range<order&&(temp=range,range=order,order=temp));useRest='+'===useRest.groups.rest;return useRest&&range?{success:!1,reply:'Cannot combine both the \u{22}range\u{22} and \u{22}rest\u{22} argument identifiers!'}:useRest?inputArguments.slice(order).join(' '):range?inputArguments.slice(order,range).join(' '):inputArguments[order]??''}return'executor'===match?executor:'channel'===match?channel:total});resultArguments.push(...parsed.split(' '))}return{success:!0,resultArguments:resultArguments}})(expression.split(' '),newArgs);return console.log({res:res}),res.success?success(res.resultArguments.join(' ')):`abb ac 0 a em:\u{22}${res.reply.replace('\u{22}','\'')}\u{22}`};ASS_Entry();